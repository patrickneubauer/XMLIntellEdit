// automatically generated by Xtext
grammar eu.artist.tosca.dsl.ToscaDSL with org.eclipse.xtext.common.Terminals

import "http://docs.oasis-open.org/tosca/ns/2011/12" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DocumentRoot returns DocumentRoot:
	{DocumentRoot}	
	(definitions=DefinitionsType)?
	//(mixed+=FEATURE)?
	// TODO other attributes here
;

DefinitionsType returns DefinitionsType:
	'Definitions'
	id=ID0
	'{'
		('name' ':' name=STRING)?
		'targetNamespace' ':' targetNamespace=STRING
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('extensions' extensions=ExtensionsType)?
		('import' '{' ^import+=TImport ( "," ^import+=TImport)* '}' )?
		('types' types=TypesType)?
		(^import+=TImport)*
		(serviceTemplate+=TServiceTemplate)?
		(nodeType+=TNodeType)*
		(relationshipType+=TRelationshipType)*
		(requirementType+=TRequirementType)*
		(capabilityType+=TCapabilityType)*
		(artifactType+=TArtifactType)*
		(nodeTypeImplementation+=TNodeTypeImplementation)*
		(relationshipTypeImplementation+=TRelationshipTypeImplementation)*
		(artifactTemplate+=TArtifactTemplate)*
	'}';
	
//MaxInstancesTypeMember0 returns MaxInstancesTypeMember0:
//	BIGINT_POSITIVE
//;

TDefinitions_Impl returns TDefinitions:
	{TDefinitions}
	'Definitions_Impl'
	id=ID0
	'{'
		('name' ':' name=STRING)?
		'targetNamespace' ':' targetNamespace=STRING
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('extensions' extensions=ExtensionsType)?
		(^import+=TImport)*
		(serviceTemplate+=TServiceTemplate)?
		('types' types=TypesType)?
	'}';
	
QualifiedName returns ecore::EString:
  ID (=>'.' ID)*;

TDocumentation returns TDocumentation:
	{TDocumentation}
	'TDocumentation'
	'{'
		('lang' lang=EString)?
		('source' source=STRING)?
//		(mixed+=FEATURE)*
	'}';

ExtensionsType returns ExtensionsType:
	'ExtensionsType'
	'{'
		'extension' '{' extension+=TExtension ( "," extension+=TExtension)* '}' 
	'}';

TImport returns TImport:
	'Import'
		'importType' ':' importType=STRING //ImportedURI
		('location' ':' location=STRING)?
		('namespace' ':' namespace=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	;

TypesType returns TypesType:
	{TypesType}
	'TypesType'
	;

ID0 returns type::ID:
	//'ID' /* TODO: implement this rule and an appropriate IValueConverter */;
	QualifiedName;

String0 returns type::String:
	//'String' /* TODO: implement this rule and an appropriate IValueConverter */;
	STRING;

AnyURI returns type::AnyURI:
	//'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
	STRING;


EString returns ecore::EString:
	STRING | ID;

TExtension returns TExtension:
	'TExtension'
	'{'
		('mustUnderstand' mustUnderstand=TBoolean)?
		'namespace' namespace=STRING
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	'}';

ImportedURI returns ImportedURI:
	//'ImportedURI' /* TODO: implement this rule and an appropriate IValueConverter */;
	STRING;

// ---

TServiceTemplate returns TServiceTemplate:
	'ServiceTemplate'
	id=ID0
	'{'
		('name' ':' name=STRING)?
		('substitutableNodeType' substitutableNodeType=QName)?
		('targetNamespace' targetNamespace=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('boundaryDefinitions' boundaryDefinitions=TBoundaryDefinitions)?
		(topologyTemplate=TTopologyTemplate)?
		(plans=TPlans)?
	'}';

TTags returns TTags:
	'TTags'
	'{'
		'tag' '{' tag+=TTag ( "," tag+=TTag)* '}' 
	'}';

TBoundaryDefinitions returns TBoundaryDefinitions:
	{TBoundaryDefinitions}
	'TBoundaryDefinitions'
	'{'
		('properties' properties=PropertiesTypeWithPropertyMappings)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('requirements' requirements=RequirementsType_TRequirementRef)?
		('capabilities' capabilities=CapabilitiesType_CapabilityRef)?
		('policies' policies=PoliciesType)?
		('interfaces' interfaces=InterfacesType_TExportedInterface)?
	'}';

TTopologyTemplate returns TTopologyTemplate:
	{TTopologyTemplate}
	'TopologyTemplate'
	'{'
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		(nodeTemplate+=TNodeTemplate)*
		(relationshipTemplate+=TRelationshipTemplate)*
//		(group+=FEATURE)*
	'}';

TPlans returns TPlans:
	'Plans'
		('targetNamespace' ':' targetNamespace=STRING)?
		'{'
			(plan+=TPlan)* 
		'}';

QName returns type::QName:
	//'QName' /* TODO: implement this rule and an appropriate IValueConverter */;
	QualifiedName;

TTag returns TTag:
	'TTag'
	'{'
		'name' ':' name=STRING
		'value' value=STRING
	'}';

PropertiesTypeWithPropertyMappings returns PropertiesTypeWithPropertyMappings:
	{PropertiesTypeWithPropertyMappings}
	'PropertiesTypeWithPropertyMappings'
	'{'
		('propertyMappings' propertyMappings=PropertyMappingsType)?
	'}';

RequirementsType_TRequirementRef returns RequirementsType_TRequirementRef:
	'RequirementsType_TRequirementRef'
	'{'
		'requirement' '{' requirement+=TRequirementRef ( "," requirement+=TRequirementRef)* '}' 
	'}';

CapabilitiesType_CapabilityRef returns CapabilitiesType_CapabilityRef:
	'CapabilitiesType_CapabilityRef'
	'{'
		'capability' '{' capability+=TCapabilityRef ( "," capability+=TCapabilityRef)* '}' 
	'}';

InterfacesType_TExportedInterface returns InterfacesType_TExportedInterface:
	'InterfacesType_TExportedInterface'
	'{'
		'interface' '{' interface+=TExportedInterface ( "," interface+=TExportedInterface)* '}' 
	'}';

PropertyMappingsType returns PropertyMappingsType:
	'PropertyMappingsType'
	'{'
		'propertyMapping' '{' propertyMapping+=TPropertyMapping ( "," propertyMapping+=TPropertyMapping)* '}' 
	'}';

TPropertyMapping returns TPropertyMapping:
	'TPropertyMapping'
	'{'
		'serviceTemplatePropertyRef' serviceTemplatePropertyRef=STRING
		'targetObjectRef' targetObjectRef=IDREF
		'targetPropertyRef' targetPropertyRef=STRING
	'}';

IDREF returns type::IDREF:
	//'IDREF' /* TODO: implement this rule and an appropriate IValueConverter */;
	QualifiedName;

TPropertyConstraint returns TPropertyConstraint:
	'TPropertyConstraint'
	'{'
		'constraintType' constraintType=STRING
		'property' property=STRING
	'}';

TRequirementRef returns TRequirementRef:
	'TRequirementRef'
	'{'
		('name' ':' name=STRING)?
		'ref' ref=IDREF
	'}';

TCapabilityRef returns TCapabilityRef:
	'TCapabilityRef'
	'{'
		('name' ':' name=STRING)?
		'ref' ref=IDREF
	'}';

TPolicy returns TPolicy:
	'policy'
	'{'
		('name' ':' name=STRING)?
		('policyRef' policyRef=QName)?
		'policyType' policyType=QName
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	'}';

TExportedInterface returns TExportedInterface:
	'TExportedInterface'
	'{'
		'name' ':' name=STRING
		'operation' '{' operation+=TExportedOperation ( "," operation+=TExportedOperation)* '}' 
	'}';

TExportedOperation returns TExportedOperation:
	'TExportedOperation'
	'{'
		'name' ':' name=NCName
		('nodeOperation' nodeOperation=NodeOperationType)?
		('relationshipOperation' relationshipOperation=RelationshipOperationType)?
		('plan' plan=PlanType)?
	'}';

NodeOperationType returns NodeOperationType:
	'NodeOperationType'
	'{'
		'interfaceName' interfaceName=STRING
		'nodeRef' nodeRef=IDREF
		'operationName' operationName=NCName
	'}';

RelationshipOperationType returns RelationshipOperationType:
	'RelationshipOperationType'
	'{'
		'interfaceName' interfaceName=STRING
		'operationName' operationName=NCName
		'relationshipRef' relationshipRef=IDREF
	'}';

PlanType returns PlanType:
	'PlanType'
	'{'
		'planRef' planRef=IDREF
	'}';

NCName returns type::NCName:
	'NCName' /* TODO: implement this rule and an appropriate IValueConverter */;

TPlan returns TPlan:
	'Plan'
	id=ID0
	'planType' ':' planType=STRING
	'planLanguage' ':' planLanguage=STRING
	'{'
		('name' ':' name=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('precondition' precondition=TCondition)?
		(inputParameters=InputParametersType)?
		(outputParameters=OutputParametersType)?
		('planModel' planModel=PlanModelType)?
		(planModelReference=PlanModelReferenceType)?
	'}';

TCondition returns TCondition:
	'TCondition'
	'{'
		'expressionLanguage' expressionLanguage=STRING
	'}';

InputParametersType returns InputParametersType:
	'InputParameters'
	'{'
		(inputParameter+=TInputParameter)* 
	'}';

OutputParametersType returns OutputParametersType:
	'OutputParameters'
	'{'
		(outputParameter+=TOutputParameter)* 
	'}';
	
PlanModelType returns PlanModelType:
	{PlanModelType}
	'PlanModelType'
	;

PlanModelReferenceType returns PlanModelReferenceType:
	'PlanModelReference'
	'{'
		'reference' ':' reference=STRING
	'}';

TInputParameter returns TParameter:
	'InputParameter'
	'name' ':' name=STRING
	'type' ':' type=STRING
	('required' ':' required=TBoolean)?
	;
	
TOutputParameter returns TParameter:
	'OutputParameter'
	'name' ':' name=STRING
	'type' ':' type=STRING
	('required' ':' required=TBoolean)?
	;

enum TBoolean returns TBoolean:
				yes = 'yes' | no = 'no';
				
// ----- 

TNodeType returns TNodeType:
	'NodeType'	
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' ':' name=NCName
		('targetNamespace' targetNamespace=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType)?
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
		('requirementDefinitions' requirementDefinitions=RequirementDefinitionsType)?
		('capabilityDefinitions' capabilityDefinitions=CapabilityDefinitionsType)?
		('instanceStates' instanceStates=TTopologyElementInstanceStates)?
		('interfaces' interfaces=InterfacesType_TInterface)?
	'}';

TConstraint returns TConstraint:
	TConstraint_Impl | TPropertyConstraint;

PropertiesDefinitionType returns PropertiesDefinitionType:
	{PropertiesDefinitionType}
	'PropertiesDefinitionType'
	'{'
		('element' element=QName)?
		('type' type=QName)?
	'}';

RequirementDefinitionsType returns RequirementDefinitionsType:
	'RequirementDefinitionsType'
	'{'
		'requirementDefinition' '{' requirementDefinition+=TRequirementDefinition ( "," requirementDefinition+=TRequirementDefinition)* '}' 
	'}';

CapabilityDefinitionsType returns CapabilityDefinitionsType:
	'CapabilityDefinitionsType'
	'{'
		'capabilityDefinition' '{' capabilityDefinition+=TCapabilityDefinition ( "," capabilityDefinition+=TCapabilityDefinition)* '}' 
	'}';

TTopologyElementInstanceStates returns TTopologyElementInstanceStates:
	'TTopologyElementInstanceStates'
	'{'
		'instanceState' '{' instanceState+=InstanceStateType ( "," instanceState+=InstanceStateType)* '}' 
	'}';

InterfacesType_TInterface returns InterfacesType_TInterface:
	'InterfacesType_TInterface'
	'{'
		'interface' '{' interface+=TInterface ( "," interface+=TInterface)* '}' 
	'}';

TRequirementDefinition returns TRequirementDefinition:
	'TRequirementDefinition'
	'{'
		('lowerBound' lowerBound=INT)?
		'name' ':' name=STRING
		'requirementType' requirementType=QName
		('upperBound' upperBound=UpperBoundType1)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('constraints' constraints=ConstraintsType)?
	'}';

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

UpperBoundType1 returns UpperBoundType1:
	'UpperBoundType1' /* TODO: implement this rule and an appropriate IValueConverter */;

TConstraint_Impl returns TConstraint:
	'TConstraint'
	'{'
		'constraintType' constraintType=STRING
	'}';

TCapabilityDefinition returns TCapabilityDefinition:
	'TCapabilityDefinition'
	'{'
		'capabilityType' capabilityType=QName
		('lowerBound' lowerBound=INT)?
		'name' ':' name=STRING
		('upperBound' upperBound=UpperBoundType)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('constraints' constraints=ConstraintsType)?
	'}';

ConstraintsType returns ConstraintsType:
	'ConstraintsType'
	'{'
		'constraint' '{' constraint+=TConstraint ( "," constraint+=TConstraint)* '}' 
	'}';

UpperBoundType returns UpperBoundType:
	'UpperBoundType' /* TODO: implement this rule and an appropriate IValueConverter */;

InstanceStateType returns InstanceStateType:
	'InstanceStateType'
	'{'
		'state' state=STRING
	'}';

TInterface returns TInterface:
	'TInterface'
	'{'
		'name' ':' name=STRING
		'operation' '{' operation+=TOperation ( "," operation+=TOperation)* '}' 
	'}';

TOperation returns TOperation:
	'TOperation'
	'{'
		'name' ':' name=NCName
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		(inputParameters=InputParametersType)?
		(outputParameters=OutputParametersType)?
	'}';

// ------

TNodeTypeImplementation returns TNodeTypeImplementation:
	'TNodeTypeImplementation'
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' ':' name=NCName
		'nodeType' nodeType=QName
		('targetNamespace' targetNamespace=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType)?
		('requiredContainerFeatures' requiredContainerFeatures=TRequiredContainerFeatures)?
		('implementationArtifacts' implementationArtifacts=TImplementationArtifacts)?
		('deploymentArtifacts' deploymentArtifacts=TDeploymentArtifacts)?
	'}';

TRequiredContainerFeatures returns TRequiredContainerFeatures:
	'TRequiredContainerFeatures'
	'{'
		'requiredContainerFeature' '{' requiredContainerFeature+=TRequiredContainerFeature ( "," requiredContainerFeature+=TRequiredContainerFeature)* '}' 
	'}';

TImplementationArtifacts returns TImplementationArtifacts:
	'TImplementationArtifacts'
	'{'
		'implementationArtifact' '{' implementationArtifact+=ImplementationArtifactType ( "," implementationArtifact+=ImplementationArtifactType)* '}' 
	'}';

TDeploymentArtifacts returns TDeploymentArtifacts:
	'TDeploymentArtifacts'
	'{'
		'deploymentArtifact' '{' deploymentArtifact+=TDeploymentArtifact ( "," deploymentArtifact+=TDeploymentArtifact)* '}' 
	'}';

TRequiredContainerFeature returns TRequiredContainerFeature:
	'TRequiredContainerFeature'
	'{'
		'feature' feature=STRING
	'}';

ImplementationArtifactType returns ImplementationArtifactType:
	'ImplementationArtifactType'
	'{'
		('artifactRef' artifactRef=QName)?
		'artifactType' artifactType=QName
		('interfaceName' interfaceName=STRING)?
		('operationName' operationName=NCName)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	'}';

TDeploymentArtifact returns TDeploymentArtifact:
	'TDeploymentArtifact'
	'{'
		('artifactRef' artifactRef=QName)?
		'artifactType' artifactType=QName
		'name' ':' name=STRING
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	'}';

// -------

TRelationshipType returns TRelationshipType:
	'TRelationshipType'
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' ':' name=NCName
		('targetNamespace' targetNamespace=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType)?
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
		('instanceStates' instanceStates=TTopologyElementInstanceStates)?
		('sourceInterfaces' sourceInterfaces=SourceInterfacesType)?
		('targetInterfaces' targetInterfaces=TargetInterfacesType)?
		('validSource' validSource=ValidSourceType)?
		('validTarget' validTarget=ValidTargetType)?
	'}';

SourceInterfacesType returns SourceInterfacesType:
	'SourceInterfacesType'
	'{'
		'interface' '{' interface+=TInterface ( "," interface+=TInterface)* '}' 
	'}';

TargetInterfacesType returns TargetInterfacesType:
	'TargetInterfacesType'
	'{'
		'interface' '{' interface+=TInterface ( "," interface+=TInterface)* '}' 
	'}';

ValidSourceType returns ValidSourceType:
	'ValidSourceType'
	'{'
		'typeRef' typeRef=QName
	'}';

ValidTargetType returns ValidTargetType:
	'ValidTargetType'
	'{'
		'typeRef' typeRef=QName
	'}';

// ------

 TRelationshipTypeImplementation returns TRelationshipTypeImplementation:
	'TRelationshipTypeImplementation'
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' ':' name=NCName
		'relationshipType' relationshipType=QName
		('targetNamespace' targetNamespace=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType)?
		('requiredContainerFeatures' requiredContainerFeatures=TRequiredContainerFeatures)?
		('implementationArtifacts' implementationArtifacts=TImplementationArtifacts)?
	'}';

DerivedFromType returns DerivedFromType:
	'DerivedFromType'
	'{'
		'derivedFrom' derivedFrom=QName
	'}';

// ----------

TRequirementType returns TRequirementType:
	'TRequirementType'
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' ':' name=NCName
		('targetNamespace' targetNamespace=STRING)?
		('requiredCapabilityType' requiredCapabilityType=QName)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType)?
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
	'}';

// ----------

TCapabilityType returns TCapabilityType:
	'TCapabilityType'
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' ':' name=NCName
		('targetNamespace' targetNamespace=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType)?
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
	'}';

// ----------

TArtifactType returns TArtifactType:
	'TArtifactType'
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' ':' name=NCName
		('targetNamespace' targetNamespace=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType)?
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
	'}';

// ----------

TArtifactTemplate returns TArtifactTemplate:
	'TArtifactTemplate'
	id=ID0
	'{'
		'type' type=QName
		('name' ':' name=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		//(properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('artifactReferences' artifactReferences=ArtifactReferencesType)?
	'}';

PropertiesType returns PropertiesType:
	{PropertiesType}
	'PropertiesType'
	//any += EcoreFeatureMapEntry;
;


//PropertiesType:
//	TServerProperties
//;

//TServerProperties returns TServerProperties:
//	'TServerProperties'
//	'{'
//		'numCpus' numCpus=INT
//		'memory' memory=INT
//	'}';
//
//AbstractProperty:
//	TServerProperties
//;

//PropertiesType returns PropertiesType:
//	{PropertiesType}
//	//(any += FEATURE)*
////	map = EFeatureMapType
//	('property' ':' property += AbstractProperty)?	
//;

//
//EObject returns ecore::EObject:
//	{ecore::EObject}	
//;

//EFeatureMapType:
//	'properties'	
//	id=ID0
//	'{'
//		(propertyKeyValuePair += EFeatureMapEntryType)*
//	'}'
//;
//
//EFeatureMapEntryType returns EFeatureMapEntryType:
//	name=QName
//	':'
//	value=STRING
//;

EcoreFeatureMapEntry returns ecore::EFeatureMapEntry:
	STRING		// TODO: this will not work as expected (add key-value properties here)	
;

PropertyConstraintsType returns PropertyConstraintsType:
	'PropertyConstraintsType'
	'{'
		'propertyConstraint' '{' propertyConstraint+=TPropertyConstraint ( "," propertyConstraint+=TPropertyConstraint)* '}' 
	'}';

ArtifactReferencesType returns ArtifactReferencesType:
	'ArtifactReferencesType'
	'{'
		'artifactReference' '{' artifactReference+=TArtifactReference ( "," artifactReference+=TArtifactReference)* '}' 
	'}';
	
TArtifactReference returns TArtifactReference:
	'TArtifactReference'
	'{'
		'reference' reference=AnyURI
		('include' '{' include+=IncludeType ( "," include+=IncludeType)* '}' )?
		('exclude' '{' exclude+=ExcludeType ( "," exclude+=ExcludeType)* '}' )?
	'}';

IncludeType returns IncludeType:
	'IncludeType'
	'{'
		'pattern' pattern=String0
	'}';

ExcludeType returns ExcludeType:
	'ExcludeType'
	'{'
		'pattern' pattern=String0
	'}';
// ---------

TPolicyType returns TPolicyType:
	'TPolicyType'
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' ':' name=NCName
		('targetNamespace' targetNamespace=STRING)?
		('policyLanguage' policyLanguage=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType)?
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
		('appliesTo' appliesTo=TAppliesTo)?
	'}';

TAppliesTo returns TAppliesTo:
	'TAppliesTo'
	'{'
		'nodeTypeReference' '{' nodeTypeReference+=NodeTypeReferenceType ( "," nodeTypeReference+=NodeTypeReferenceType)* '}' 
	'}';

NodeTypeReferenceType returns NodeTypeReferenceType:
	'NodeTypeReferenceType'
	'{'
		'typeRef' typeRef=QName
	'}';

// -----------

TPolicyTemplate returns TPolicyTemplate:
	'TPolicyTemplate'
	id=ID0
	'{'
		'type' type=QName
		('name' ':' name=STRING)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		//('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
	'}';

// -----------

TNodeTemplate returns TNodeTemplate:
	'NodeTemplate'
	id=ID0
	'{'
		('name' ':' name=STRING)?
		'type' ':' type=QName
		('maxInstances' maxInstances=MaxInstancesType)?
		('minInstances' minInstances=INT)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		(properties+=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		( requirements=RequirementsType_TRequirement)?
		( capabilities=CapabilitiesType_TCapability)?
		('Policies' policies=PoliciesType)?
		('DeploymentArtifacts' deploymentArtifacts=TDeploymentArtifacts)?
	'}';

RequirementsType_TRequirement returns RequirementsType_TRequirement:	
	requirement+=TRequirement ( requirement+=TRequirement)* 
;

CapabilitiesType_TCapability returns CapabilitiesType_TCapability:
	capability+=TCapability (capability+=TCapability)* 
;

PoliciesType returns PoliciesType:
	'{'
		policy+=TPolicy (policy+=TPolicy)* 
	'}';

MaxInstancesType returns MaxInstancesType:
	'MaxInstancesType' /* 	: implement this rule and an appropriate IValueConverter */;

TRequirement returns TRequirement:	
	'Requirement'
	id=ID0
	'{'
		'name' ':' name=STRING
		'type' ':' type=QName
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		//('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
	'}';

TCapability returns TCapability:
	'Capability'
	id=ID0
	'{'
		'name' ':' name=STRING
		'type' ':' type=QName
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		//('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
	'}';

// -----------
	
TRelationshipTemplate returns TRelationshipTemplate:
	'RelationshipTemplate'
	id=ID0
	'{'
		('name' ':' name=STRING)?
		'type' ':' type=QName
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		//('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		'sourceElement' sourceElement=SourceElementType
		'targetElement' targetElement=TargetElementType
		('relationshipConstraints' relationshipConstraints=RelationshipConstraintsType)?
	'}';

SourceElementType returns SourceElementType:
	'ref' ref=IDREF
;

TargetElementType returns TargetElementType:
	'ref' ref=IDREF
;

RelationshipConstraintsType returns RelationshipConstraintsType:
	'RelationshipConstraintsType'
	'{'
		'relationshipConstraint' '{' relationshipConstraint+=RelationshipConstraintType ( "," relationshipConstraint+=RelationshipConstraintType)* '}' 
	'}';

RelationshipConstraintType returns RelationshipConstraintType:
	'RelationshipConstraintType'
	'{'
		'constraintType' constraintType=STRING
	'}';

// In order to resolve problem with EFeatureMapEntry
//terminal FEATURE returns ecore::EFeatureMapEntry: '<' STRING '>';
//terminal BIGINT_POSITIVE returns ecore::EBigInteger: (('1'..'9')('0'..'9')*);
// ([1-9]+[0-9]*)