<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<bpel:process 
	xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable" 
	xmlns:bpel4RestLight="http://iaas.uni-stuttgart.de/bpel/extensions/bpel4restlight" 
	
	xmlns:ns1="http://www.w3.org/2001/XMLSchema" 
	xmlns:ns2="http://siserver.org/wsdl" 
	xmlns:ns3="http://docs.oasis-open.org/tosca/ns/2011/12" 
	xmlns:ns4="http://opentosca.org/openTOSCAReferencesSchema" 
	xmlns:tns="http:///www.opentosca.org/examples/Moodle/BuildPlan" 
	xmlns:si="http://siserver.org/schema"
	
	name="MoodleBuildPlan" 
	suppressJoinFailure="yes" 
	targetNamespace="http:///www.opentosca.org/examples/Moodle/BuildPlan">



	<!-- ================================================================= -->
	<!-- ========================= Extensions ============================ -->
	<!-- ================================================================= -->
	<bpel:extensions>
		<bpel:extension mustUnderstand="yes" namespace="http://iaas.uni-stuttgart.de/bpel/extensions/bpel4restlight"/>
	</bpel:extensions>


	<!-- ================================================================= -->
	<!-- ========================== Imports ============================== -->
	<!-- ================================================================= -->
	<bpel:import namespace="http://siserver.org/schema" location="siservice/invoker.xsd" importType="http://www.w3.org/2001/XMLSchema"></bpel:import>
    <bpel:import namespace="http://siserver.org/wsdl" location="siservice/invoker.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>		
	<bpel:import namespace="http:///www.opentosca.org/examples/Moodle/BuildPlan" location="MoodleBuildPlanArtifacts.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
	<bpel:import namespace="http://opentosca.org/openTOSCAReferencesSchema" location="openTOSCAXlinkAPIXmlSchema/openTOSCAReferencesSchema.xsd" importType="http://www.w3.org/2001/XMLSchema"/>
	<bpel:import namespace="http://docs.oasis-open.org/tosca/ns/2011/12" location="TOSCA-v1.0-csprd01.xsd" importType="http://www.w3.org/2001/XMLSchema"/>


	<!-- ================================================================= -->
	<!-- ======================== PartnerLinks =========================== -->
	<!-- ================================================================= -->
	<bpel:partnerLinks>		
		<bpel:partnerLink name="client" partnerLinkType="tns:MoodleBuildPlan" myRole="MoodleBuildPlanProvider" partnerRole="MoodleBuildPlanRequester"/>		
		<bpel:partnerLink name="SIInvokerPL" partnerLinkType="tns:SIInvokerPLT" initializePartnerRole="yes" myRole="Requester" partnerRole="Requestee"/>
	</bpel:partnerLinks>

	
	<!-- ================================================================= -->
	<!-- ========================== Variables ============================ -->
	<!-- ================================================================= -->
	<bpel:variables>
	
		<!-- ============================================================= -->
		<!-- Message Variables for main communication PartnerLink "Client" -->
		<!-- ============================================================= -->
		
		<bpel:variable name="input" messageType="tns:MoodleBuildPlanRequestMessage"/>		
		<bpel:variable name="output" messageType="tns:MoodleBuildPlanResponseMessage"/>
		
		
		<!-- ============================================================= -->
		<!-- Message Variables for Service Invoker PartnerLink "SIInvokerPL" -->
		<!-- ============================================================= -->
		
		<bpel:variable name="genericAsynchOperationServiceInvokerRequest" messageType="ns2:invokeOperationAsyncMessage"/>		
		<bpel:variable name="genericAsynchOperationServiceInvokerResponse" messageType="ns2:invokeResponse"/>
		
				
		<!-- ============================================================= -->		
		<!-- Message Variable for communication with OpenTOSCA InstanceAPI -->
		<!-- ============================================================= -->
		
		<bpel:variable name="genericInstanceAPIResponseMessage" type="ns1:anyType"/>
		
		
		<!-- ============================================================= -->
		<!-- Variable containing Endpoint URL of process instance needed for asynchronous Service Invoker Callback (ReplyTo-Address) -->
		<!-- ============================================================= -->
		
		<bpel:variable name="ownEndpoint" type="ns1:string"/>
		
		
		<!-- ============================================================= -->
		<!-- Variable containing Endpoint URL of Process Requestor needed for asynchronous Callback Invocation -->
		<!-- ============================================================= -->
		
		<bpel:variable name="callbackUrl" type="ns1:string"/>
		
		
		<!-- ============================================================= -->
		<!-- Variables for TOSCA Container Portability API Communication -->
		<!-- ============================================================= -->
		
		<bpel:variable name="CSARName" type="ns1:string"/>
		<bpel:variable name="ContainerURL" type="ns1:string"/>
		<bpel:variable name="csarEntrypointURL" type="ns1:string"/>
		<bpel:variable name="serviceInstanceURI" type="ns1:string"/>
		<bpel:variable name="OpenTOSCAPortabilityAPIArtifactContainer" type="ns1:anyType" />
		
		<!-- ============================================================= -->				
		<!-- Variables for Amazon Web Services API -->		
		<!-- ============================================================= -->
		
		<bpel:variable name="aws_Region" type="ns1:string"/>
		<bpel:variable name="aws_SecurityGroup" type="ns1:string"/>
		<bpel:variable name="aws_KeyPairName" type="ns1:string"/>
		<bpel:variable name="aws_SSHKey" type="ns1:string"/>
		<bpel:variable name="aws_AMI" type="ns1:string"/>
		<bpel:variable name="aws_InstanceType" type="ns1:string"/>
		<bpel:variable name="aws_SecretKey" type="ns1:string"/>
		<bpel:variable name="aws_AccessKey" type="ns1:string"/>
		
		
		<!-- ============================================================= -->				
		<!-- Application Specific Variables -->		
		<!-- ============================================================= -->
		
		<bpel:variable name="ApplicationURL" type="ns1:string"/>		
		
		<bpel:variable name="VM_Hostname" type="ns1:string"/>		
		<bpel:variable name="VM_InstanceID" type="ns1:string"/>			
								
	</bpel:variables>


	<!-- ================================================================= -->
	<!-- ======================= Correlation Sets ======================== -->
	<!-- ================================================================= -->
    <bpel:correlationSets>
    
    	<!-- ============================================================= -->
		<!-- Correlation Set for asynchronous Service Invoker Requests -->
		<!-- ============================================================= -->
		

    
    </bpel:correlationSets>
    
    
    <!-- ================================================================= -->
	<!-- ====================== Orchestration Logic ====================== -->
	<!-- ================================================================= -->    
    <bpel:sequence name="main">

		<bpel:receive createInstance="yes" name="ReceiveInput" operation="initiate" partnerLink="client" portType="tns:MoodleBuildPlan" variable="input"/>

		<bpel:sequence name="StandardTasks">
		
			<bpel:sequence name="InputProcessing">
				
				<!-- Process input Message and extract information to Variables -->
				<bpel:assign name="RetrieveInputAndAssign" validate="no">
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:ami]]></bpel:query>
						</bpel:from>
						<bpel:to variable="aws_AMI"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:accessKey]]></bpel:query>
						</bpel:from>
						<bpel:to variable="aws_AccessKey"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:instanceType]]></bpel:query>
						</bpel:from>
						<bpel:to variable="aws_InstanceType"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:keyPairName]]></bpel:query>
						</bpel:from>
						<bpel:to variable="aws_KeyPairName"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:region]]></bpel:query>
						</bpel:from>
						<bpel:to variable="aws_Region"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:sshKey]]></bpel:query>
						</bpel:from>
						<bpel:to variable="aws_SSHKey"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:secretKey]]></bpel:query>
						</bpel:from>
						<bpel:to variable="aws_SecretKey"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:securityGroup]]></bpel:query>
						</bpel:from>
						<bpel:to variable="aws_SecurityGroup"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:csarName]]></bpel:query>
						</bpel:from>
						<bpel:to variable="CSARName"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:containerApi]]></bpel:query>
						</bpel:from>
						<bpel:to variable="ContainerURL"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from part="payload" variable="input">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:callbackUrl]]></bpel:query>
						</bpel:from>
						<bpel:to variable="callbackUrl"/>
					</bpel:copy>			
					<bpel:copy>
						<bpel:from><![CDATA[concat($ContainerURL, "/CSARs/",$CSARName)]]></bpel:from>
						<bpel:to variable="csarEntrypointURL"/>
					</bpel:copy>
				</bpel:assign>
				
				<!-- If csarEntrypointURL ends with a slash remove it -->
				<bpel:if name="csarEntrypointURLCheck">
					<bpel:condition expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[ends-with($csarEntrypointURL,'/')]]></bpel:condition>
					<bpel:assign name="deleteLastSlash" validate="no">
						<bpel:copy>
							<bpel:from><![CDATA[substring($csarEntrypointURL,1,string-length($csarEntrypointURL)-1)]]>
							</bpel:from>
							<bpel:to variable="csarEntrypointURL"/>
						</bpel:copy>
					</bpel:assign>
				</bpel:if>
				
				<!-- Initialize all variables that are updated withing scopes (ODE BUG) -->
				<bpel:assign>
					<bpel:copy>
						<bpel:from><![CDATA[concat("Not","Set")]]></bpel:from>
						<bpel:to variable="ApplicationURL"/>
					</bpel:copy>
					<bpel:copy>
						<bpel:from><![CDATA[concat("Not","Set")]]></bpel:from>
						<bpel:to variable="VM_Hostname"/>
					</bpel:copy>					
					<bpel:copy>
						<bpel:from><![CDATA[concat("Not","Set")]]></bpel:from>
						<bpel:to variable="VM_InstanceID"/>
					</bpel:copy>					
				</bpel:assign>
				
			</bpel:sequence>
	
			<bpel:sequence name="OutputAndCallbackPreparation">
		
				<!-- Set Callback Endpoint for Main Communication PartnerLink "Client"  -->
				<bpel:assign name="SetCallbackURLToClientPartnerLink" validate="no">
					<bpel:copy>
						<bpel:from><![CDATA[$callbackUrl]]></bpel:from>
						<bpel:to partnerLink="client"></bpel:to>
					</bpel:copy>
				</bpel:assign>
				
				<!-- Prepare Output Message for Main Communication PartnerLink "Client"  -->
				<bpel:assign name="InitializeOutputMessage" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<tns:MoodleBuildPlanResponse xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<tns:result>tns:result</tns:result>
									<tns:selfserviceApplicationUrl>tns:selfserviceApplicationUrl</tns:selfserviceApplicationUrl>							
									<tns:CorrelationID>tns:CorrelationID</tns:CorrelationID>
								</tns:MoodleBuildPlanResponse>
							</bpel:literal>
						</bpel:from>
						<bpel:to part="payload" variable="output"/>
					</bpel:copy>
				</bpel:assign>
		
				<!-- Set CorrelationID in Output Message for Main Communication PartnerLink "Client"  -->        
				<bpel:assign name="SetCorrelationIDForOutputMessage" validate="no">
		    		<bpel:copy>
		                <bpel:from part="payload" variable="input">
		                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:CorrelationID]]></bpel:query>
		                </bpel:from>
		                <bpel:to part="payload" variable="output">
		                    <bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0">
		                        <![CDATA[tns:CorrelationID]]>
		                    </bpel:query>
		                </bpel:to>
		            </bpel:copy>
				</bpel:assign>
		
				<!-- Set Own-CallbackURL for asynchronous response from PartnerLink "SIInvokerPL"  -->
		        <bpel:assign validate="no" name="ExtractOwnEndpointForServiceInvokerCallback">
            		<bpel:copy>
                		<bpel:from partnerLink="SIInvokerPL" endpointReference="myRole"></bpel:from>
                		<bpel:to variable="ownEndpoint"></bpel:to>
            		</bpel:copy>
        		</bpel:assign>
		
			</bpel:sequence>
	
		
			<bpel:sequence name="TOSCAContainerAccessPreparation">
			
				<!--  Service Instance URI Retrieval -->        
		        <bpel:sequence name="ServiceInstanceURIRetrieval">
		        		
					<bpel:extensionActivity>
						<bpel4RestLight:POST accept="application/xml" response="genericInstanceAPIResponseMessage" uri="$bpelvar[ContainerURL]/instancedata/serviceInstances?csarID=$bpelvar[CSARName]&amp;serviceTemplateID={http://www.example.com/tosca/ServiceTemplates/Moodle}Moodle"/>
					</bpel:extensionActivity>		
						
					<bpel:assign name="serviceInstanceUriAssign">
						<bpel:copy>
							<bpel:from variable="genericInstanceAPIResponseMessage">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[string(//*[local-name()='link']/@*[local-name()='href'])]]>
								</bpel:query>
							</bpel:from>
							<bpel:to variable="serviceInstanceURI"></bpel:to>
						</bpel:copy>
					</bpel:assign>
				</bpel:sequence>
		
			</bpel:sequence>			

		</bpel:sequence>			


	

		
<!-- ================================================================================================ -->
<!-- =================================== Provisioning Logic Start =================================== -->
<!-- ================================================================================================ -->  
			
	<bpel:sequence name="MoodleProvisioningLogic">
	
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ==================== Provision Web Server Virtual Machine ============================================= -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->

		<bpel:scope name="Provision Web Server Virtual Machine">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">
				
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>?</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://www.example.com/tosca/ServiceTemplates/Moodle</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>Moodle</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>?</impl:MessageID>
												
									<impl:NodeTemplateID>VmApache</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceAmazonEC2VM</impl:InterfaceName>
									<impl:OperationName>create</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>instanceType</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>AMIid</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>regionEndpoint</impl:key><impl:value>TESTMODE</impl:value></impl:Param>
										<impl:Param><impl:key>accessKey</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>secretKey</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>securityGroup</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>keyPairName</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>
														
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_instanceType">
						<bpel:copy>
							<bpel:from variable="aws_InstanceType"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="instanceType"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_AMIid">
						<bpel:copy>
							<bpel:from variable="aws_AMI"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="AMIid"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>	
					<bpel:assign name="Set_regionEndpoint">
						<bpel:copy>
							<bpel:from variable="aws_Region"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="regionEndpoint"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_accessKey">
						<bpel:copy>
							<bpel:from variable="aws_AccessKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="accessKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
					<bpel:assign name="Set_secretKey">
						<bpel:copy>
							<bpel:from variable="aws_SecretKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="secretKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>							
					<bpel:assign name="Set_securityGroup">
						<bpel:copy>
							<bpel:from variable="aws_SecurityGroup"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="securityGroup"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>		
					<bpel:assign name="Set_keyPairName">
						<bpel:copy>
							<bpel:from variable="aws_KeyPairName"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="keyPairName"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
				</bpel:sequence>  				
				
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>					
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="publicDNS"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="VM_Hostname"></bpel:to>
					</bpel:copy>
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="instanceId"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="VM_InstanceID"></bpel:to>
					</bpel:copy>
				</bpel:assign>
								
			</bpel:sequence>		
		</bpel:scope>	
		
		
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ==================== Wait for Web Server Operating System ============================================= -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->

		<bpel:scope name="Wait for Web Server Operating System">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">
					
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>?</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://www.example.com/tosca/ServiceTemplates/Moodle</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>Moodle</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>?</impl:MessageID>
												
									<impl:NodeTemplateID>OsApache</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>start</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>hostname</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>ubuntu</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>
														
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="VM_Hostname"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="aws_SSHKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
				</bpel:sequence>  				
				
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="pwd"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="LocalStatusMessage"></bpel:to>
					</bpel:copy>					
				</bpel:assign>
				
			</bpel:sequence>		
		</bpel:scope>	
		
			
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ============ Prepare APT and Install Packages for Web Server Operating System ========================= -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->

		<bpel:scope name="Prepare APT and Install Packages for Web Server Operating System">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">
					
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>?</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://www.example.com/tosca/ServiceTemplates/Moodle</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>Moodle</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>?</impl:MessageID>
												
									<impl:NodeTemplateID>OsApache</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>runScript</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>script</impl:key><impl:value>sudo apt-get -y update; sudo apt-get -y install apache2 php5 php5-mysql php5-xmlrpc php5-json php5-curl libphp-pclzip mysql-client php5-gd</impl:value></impl:Param>
										<impl:Param><impl:key>hostname</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>ubuntu</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>
														
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="VM_Hostname"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="aws_SSHKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
				</bpel:sequence>  				
				
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="scriptOutput"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="LocalStatusMessage"></bpel:to>
					</bpel:copy>					
				</bpel:assign>
				
			</bpel:sequence>		
		</bpel:scope>	
				
		
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ============ Upload Moodle Archive to Webserver Operating System ====================================== -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
				
		<bpel:scope name="Upload Moodle Archive to Webserver Operating System">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>				
				<bpel:variable name="RemotePathOfArchive" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">
			
				<!-- Get Remote Path of File to be transferred -->
				<bpel:extensionActivity>
					<bpel4RestLight:GET
						uri="$bpelvar[ContainerURL]/portability/artifacts?csarID=$bpelvar[CSARName]&amp;targetNamespace=http://www.example.com/tosca/ServiceTemplates/Moodle&amp;serviceTemplateID=Moodle&amp;templateID=MoodleApp&amp;artifactType=DA"
						accept="application/xml" response="OpenTOSCAPortabilityAPIArtifactContainer">				
					</bpel4RestLight:GET>
				</bpel:extensionActivity>
				
				<bpel:assign name="assign">
					<bpel:copy>
						<bpel:from variable="OpenTOSCAPortabilityAPIArtifactContainer">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='Artifacts']/*[local-name()='deploymentArtifacts']/*[local-name()='deploymentArtifact' and @name='MoodleApplication-archive']/*[local-name()='references']/*[local-name()='ref']/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="RemotePathOfArchive"></bpel:to>
					</bpel:copy>
				</bpel:assign>
				
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>?</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://www.example.com/tosca/ServiceTemplates/Moodle</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>Moodle</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>?</impl:MessageID>
												
									<impl:NodeTemplateID>OsApache</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>transferFile</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>targetAbsolutePath</impl:key><impl:value>/home/ubuntu/moodle.tgz</impl:value></impl:Param>
										<impl:Param><impl:key>sourceURLorLocalAbsolutePath</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>hostname</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>ubuntu</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>
														
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="VM_Hostname"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="aws_SSHKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>								
					<bpel:assign name="Set_sourceURLorLocalAbsolutePath">
						<bpel:copy>
							<bpel:from variable="RemotePathOfArchive"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sourceURLorLocalAbsolutePath"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>	
				</bpel:sequence>  				
				
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="transferInfo"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="LocalStatusMessage"></bpel:to>
					</bpel:copy>					
				</bpel:assign>
												
			</bpel:sequence>		
		</bpel:scope>	

		
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ============ Upload Moodle Config.php to Webserver Operating System =================================== -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
				
		<bpel:scope name="Upload Moodle Config.php to Webserver Operating System">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>				
				<bpel:variable name="RemotePathOfArchive" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">
							
				<!-- Get Remote Path of File to be transferred -->
				<bpel:extensionActivity>
					<bpel4RestLight:GET
						uri="$bpelvar[ContainerURL]/portability/artifacts?csarID=$bpelvar[CSARName]&amp;targetNamespace=http://www.example.com/tosca/ServiceTemplates/Moodle&amp;serviceTemplateID=Moodle&amp;templateID=MoodleApp&amp;artifactType=DA"
						accept="application/xml" response="OpenTOSCAPortabilityAPIArtifactContainer">				
					</bpel4RestLight:GET>
				</bpel:extensionActivity>
				
				<bpel:assign name="assign">
					<bpel:copy>
						<bpel:from variable="OpenTOSCAPortabilityAPIArtifactContainer">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='Artifacts']/*[local-name()='deploymentArtifacts']/*[local-name()='deploymentArtifact' and @name='MoodleApplication-ConfigFiles']/*[local-name()='references']/*[local-name()='ref']/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="RemotePathOfArchive"></bpel:to>
					</bpel:copy>
				</bpel:assign>
				
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>?</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://www.example.com/tosca/ServiceTemplates/Moodle</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>Moodle</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>?</impl:MessageID>
												
									<impl:NodeTemplateID>OsApache</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>transferFile</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>targetAbsolutePath</impl:key><impl:value>/home/ubuntu/config.php</impl:value></impl:Param>
										<impl:Param><impl:key>sourceURLorLocalAbsolutePath</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>hostname</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>ubuntu</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>
														
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="VM_Hostname"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="aws_SSHKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>								
					<bpel:assign name="Set_sourceURLorLocalAbsolutePath">
						<bpel:copy>
							<bpel:from variable="RemotePathOfArchive"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sourceURLorLocalAbsolutePath"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>	
				</bpel:sequence>  				
				
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="transferInfo"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="LocalStatusMessage"></bpel:to>
					</bpel:copy>					
				</bpel:assign>
				
			</bpel:sequence>		
		</bpel:scope>	
		
		
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ============ Upload moodledb.sql to Database Operating System ========================================= -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
				
		<bpel:scope name="Upload moodledb.sql to Database Operating System">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>				
				<bpel:variable name="RemotePathOfArchive" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
		
			<bpel:sequence name="ProvisioningSequence">

				<!-- Get Remote Path of File to be transferred -->
				<bpel:extensionActivity>
					<bpel4RestLight:GET
						uri="$bpelvar[ContainerURL]/portability/artifacts?csarID=$bpelvar[CSARName]&amp;targetNamespace=http://www.example.com/tosca/ServiceTemplates/Moodle&amp;serviceTemplateID=Moodle&amp;templateID=MoodleDb&amp;artifactType=DA"
						accept="application/xml" response="OpenTOSCAPortabilityAPIArtifactContainer">				
					</bpel4RestLight:GET>
				</bpel:extensionActivity>
				
				<bpel:assign name="assign">
					<bpel:copy>
						<bpel:from variable="OpenTOSCAPortabilityAPIArtifactContainer">
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0"><![CDATA[//*[local-name()='Artifacts']/*[local-name()='deploymentArtifacts']/*[local-name()='deploymentArtifact' and @name='MoodleDbContent-File']/*[local-name()='references']/*[local-name()='ref']/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="RemotePathOfArchive"></bpel:to>
					</bpel:copy>
				</bpel:assign>
				
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>?</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://www.example.com/tosca/ServiceTemplates/Moodle</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>Moodle</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>?</impl:MessageID>
												
									<impl:NodeTemplateID>OsApache</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>transferFile</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>targetAbsolutePath</impl:key><impl:value>/home/ubuntu/moodledb.sql</impl:value></impl:Param>
										<impl:Param><impl:key>sourceURLorLocalAbsolutePath</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>hostname</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>ubuntu</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>
														
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="VM_Hostname"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="aws_SSHKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>								
					<bpel:assign name="Set_sourceURLorLocalAbsolutePath">
						<bpel:copy>
							<bpel:from variable="RemotePathOfArchive"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sourceURLorLocalAbsolutePath"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>	
				</bpel:sequence>  				
									
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="transferInfo"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="LocalStatusMessage"></bpel:to>
					</bpel:copy>					
				</bpel:assign>
				
			</bpel:sequence>		
		</bpel:scope>	
							
				
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ============ Install Database Packages and Configure Database ========================================= -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->

		<bpel:scope name="Install Database Packages and Configure Database">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>
				<bpel:variable name="Script" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>

			<bpel:sequence name="ProvisioningSequence">

				<!-- Assign Script to corresponding Variable and replace Placeholders -->			
				<bpel:assign>
					<bpel:copy>
						<bpel:from>
							<bpel:literal xml:space="preserve"><![CDATA[
												
								MySQLPort='3306';
								MySQLUser='mdladmin';
								MySQLPwd='mdladmin';
								MySQLDB='moodledb';

								MySQLRootPassword='highlySecureRootPasswort!';

								echo "# Installs MySQL and specifies credentials";
								echo "mysql-server mysql-server/root_password password $MySQLRootPassword" | sudo debconf-set-selections;
								echo "mysql-server mysql-server/root_password_again password $MySQLRootPassword" | sudo debconf-set-selections;
								sudo apt-get -y install mysql-server;

								echo "# Make MySQL available to the outside and restart";
								sudo sed -i "s/127.0.0.1/0.0.0.0/g" /etc/mysql/my.cnf;
								sudo service mysql restart;

								mysql -uroot -p$MySQLRootPassword -e "create user $MySQLUser;";
								mysql -uroot -p$MySQLRootPassword -e "grant all privileges on *.* to '$MySQLUser'@'%' identified by '$MySQLPwd';";
															
								mysql -uroot -p$MySQLRootPassword -e "create database $MySQLDB;";
								
								DbDumpFile=~/moodledb.sql;
								mysql -uroot -p$MySQLRootPassword $MySQLDB < $DbDumpFile;								
																				
							]]></bpel:literal>
						</bpel:from>
						<bpel:to variable="Script"/>
					</bpel:copy>
				</bpel:assign>	
				
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>?</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://www.example.com/tosca/ServiceTemplates/Moodle</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>Moodle</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>?</impl:MessageID>
												
									<impl:NodeTemplateID>OsApache</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>runScript</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>script</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>hostname</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>ubuntu</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>
														
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="VM_Hostname"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="aws_SSHKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
					<bpel:assign name="Set_script">
						<bpel:copy>
							<bpel:from variable="Script"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="script"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
				</bpel:sequence>  				
				
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="scriptOutput"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="LocalStatusMessage"></bpel:to>
					</bpel:copy>					
				</bpel:assign>
				
			</bpel:sequence>		
		</bpel:scope>	
		
		
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->
		<!-- ============ Install Moodle on Webserver ============================================================== -->
		<!-- ======================================================================================================= -->
		<!-- ======================================================================================================= -->

		<bpel:scope name="Install Moodle on Webserver">
		
			<!-- Local Status Message for asynchronous Service Invoker Responses -->			
			<bpel:variables>
				<bpel:variable name="LocalStatusMessage" type="ns1:string"/>
				<bpel:variable name="Script" type="ns1:string"/>
			</bpel:variables>
			
			<!-- Correlation Set for asynchronous Service Invoker Requests -->			
			<bpel:correlationSets>
				<bpel:correlationSet name="ServiceInvokerCorrelation" properties="tns:MessageID"></bpel:correlationSet>    
			</bpel:correlationSets>
	
			<bpel:sequence name="ProvisioningSequence">

				<!-- Assign Script to corresponding Variable and replace Placeholders -->			
				<bpel:assign>
					<bpel:copy>
						<bpel:from>
							<bpel:literal xml:space="preserve"><![CDATA[
								
								MoodleHost='PLACEHOLDERMOODLEHOST';
								MySQLHost='PLACEHOLDERMYSQLHOST';
									
								MoodleAdminUser='admin';
								MoodleAdminPassword='moodle123';

								echo "# Folders and files";
								MoodleSiteName='moodle';
								ApacheWWWDir='/var/www/';
								MoodleInstallDir=$ApacheWWWDir$MoodleSiteName;
								MoodleDataDir=$ApacheWWWDir$MoodleSiteName'_data';
								ConfigFileName='config.php';
								ConfigFile=$MoodleInstallDir'/'$ConfigFileName;
								
								echo "# DB Data";
								MySQLPort='3306';
								MySQLUser='mdladmin';
								MySQLPwd='mdladmin';
								MySQLDB='moodledb';

								echo "# Unzip";
								sudo tar -zxf ~/moodle.tgz -C $ApacheWWWDir;
								sudo mv ~/$ConfigFileName $ConfigFile;
								sudo mkdir $MoodleInstallDir -p;
								sudo chmod 755 $MoodleInstallDir -R;
								sudo mkdir $MoodleInstallDir/cache -p;
								sudo chmod 777 $MoodleInstallDir/cache -R;

								echo "# Create data dir";
								sudo mkdir -p $MoodleDataDir;
								sudo chmod 777 $MoodleDataDir;
								  
								echo "# Configure moodle";
								sudo sed -i "s/@MOODLE_HOST@/$MoodleHost/g" $ConfigFile;
								sudo sed -i "s/@MOODLE_SITE@/$MoodleSiteName/g" $ConfigFile;
								sudo sed -i "s/@MOODLE_ADMIN_USER@/$MoodleAdminUser/g" $ConfigFile;
								sudo sed -i "s/@DB_HOST@/$MySQLHost/g" $ConfigFile;
								sudo sed -i "s/@DB_PORT@/$MySQLPort/g" $ConfigFile;
								sudo sed -i "s/@DB_NAME@/$MySQLDB/g" $ConfigFile;
								sudo sed -i "s/@DB_USER@/$MySQLUser/g" $ConfigFile;
								sudo sed -i "s/@DB_PASSWORD@/$MySQLPwd/g" $ConfigFile;
								

								echo "# connect to DB and update Admin User, Admin Password and Site Name";
								mysql -h$MySQLHost -P$MySQLPort -u$MySQLUser -p$MySQLPwd -D$MySQLDB -e "update mdl_config set value = '$MoodleDataDir/geoip/GeoLiteCity.dat' where name = 'geoipfile'; update mdl_config_log set value = '$MoodleDataDir/geoip/GeoLiteCity.dat' where name = 'geoipfile'; update mdl_course set fullname = '$MoodleSiteName', shortname = '$MoodleSiteName' where shortname = 'moodle'; update mdl_mnet_host set wwwroot = 'http://$MoodleHost/$MoodleSiteName', ip_address = '$MoodleHost', name = '$MoodleHost' where wwwroot = 'http://localhost/moodle'; update mdl_user set username = '$MoodleAdminUser', password = md5('$MoodleAdminPassword') where username = 'admin';";
												
								sudo service apache2 restart;
												
								sleep 5;
							]]></bpel:literal>
						</bpel:from>
						<bpel:to variable="Script"/>
					</bpel:copy>
				</bpel:assign>	
				
				<bpel:assign>
					<bpel:copy>
						<bpel:from expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0">
							<![CDATA[replace($Script,"PLACEHOLDERMOODLEHOST",$VM_Hostname)]]>
						</bpel:from>
						<bpel:to variable="Script"/>
					</bpel:copy>		
					<bpel:copy>
						<bpel:from expressionLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath2.0">
							<![CDATA[replace($Script,"PLACEHOLDERMYSQLHOST",$VM_Hostname)]]>
						</bpel:from>
						<bpel:to variable="Script"/>
					</bpel:copy>							
				</bpel:assign>		
						
				<!-- Request Preparation -->
				<bpel:assign name="PrepareRequest" validate="no">		
					<bpel:copy>
						<bpel:from>
							<bpel:literal>
								<impl:invokeOperationAsync xmlns:impl="http://siserver.org/schema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
									<impl:CsarID>?</impl:CsarID>
									<impl:ServiceTemplateIDNamespaceURI>http://www.example.com/tosca/ServiceTemplates/Moodle</impl:ServiceTemplateIDNamespaceURI>
									<impl:ServiceTemplateIDLocalPart>Moodle</impl:ServiceTemplateIDLocalPart>
									<impl:ReplyTo>?</impl:ReplyTo>
									<impl:MessageID>?</impl:MessageID>
												
									<impl:NodeTemplateID>OsApache</impl:NodeTemplateID>
									<impl:InterfaceName>InterfaceUbuntu</impl:InterfaceName>
									<impl:OperationName>runScript</impl:OperationName>
										
									<impl:Params>
										<impl:Param><impl:key>script</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>hostname</impl:key><impl:value>empty</impl:value></impl:Param>
										<impl:Param><impl:key>sshUser</impl:key><impl:value>ubuntu</impl:value></impl:Param>
										<impl:Param><impl:key>sshKey</impl:key><impl:value>empty</impl:value></impl:Param>
									</impl:Params>	
														
								</impl:invokeOperationAsync>
							</bpel:literal>
						</bpel:from>
						<bpel:to variable="genericAsynchOperationServiceInvokerRequest" part="invokeOperationAsync"/>
					</bpel:copy>                  
				</bpel:assign>
														
					
				<!-- Set Input Parameters -->	
				<bpel:sequence name="SetInputParameters">
					<bpel:assign name="Set_hostname">
						<bpel:copy>
							<bpel:from variable="VM_Hostname"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="hostname"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="Set_sshKey">
						<bpel:copy>
							<bpel:from variable="aws_SSHKey"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="sshKey"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
					<bpel:assign name="Set_script">
						<bpel:copy>
							<bpel:from variable="Script"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="script"]/following-sibling::*[local-name()="value"]]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>						
				</bpel:sequence>  				
				
					
				<!-- Set Meta-Information for asynchronous communication -->
				<bpel:sequence name="SetReplyToAndMessageId">
					<bpel:assign name="SetReplyToAddress">
						<bpel:copy>
							<bpel:from variable="ownEndpoint"></bpel:from>
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:ReplyTo]]></bpel:query>
							</bpel:to>
						</bpel:copy>  
					</bpel:assign>
					<bpel:assign name="SetMessageID">
						<bpel:copy>
							<bpel:from><![CDATA[concat("CorrelationID1", $callbackUrl)]]></bpel:from>         
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:MessageID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>
					<bpel:assign name="SetCsarID">
						<bpel:copy>
							<bpel:from variable="CSARName"></bpel:from>     
							<bpel:to part="invokeOperationAsync" variable="genericAsynchOperationServiceInvokerRequest">
								<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[si:CsarID]]></bpel:query>
							</bpel:to>
						</bpel:copy>                
					</bpel:assign>						
				</bpel:sequence>                

				<!-- Aysnchronous Invocation  -->
				<bpel:invoke name="sendRequest" operation="invokeOperationAsync" inputVariable="genericAsynchOperationServiceInvokerRequest" partnerLink="SIInvokerPL">
					<bpel:correlations>
						<bpel:correlation initiate="yes" set="ServiceInvokerCorrelation"></bpel:correlation>
					</bpel:correlations>
				</bpel:invoke>
							
				<bpel:receive name="ReceiveResponse" operation="callback" variable="genericAsynchOperationServiceInvokerResponse" partnerLink="SIInvokerPL"  portType="ns2:CallbackPortType">
					<bpel:correlations>
						<bpel:correlation set="ServiceInvokerCorrelation" initiate="no"></bpel:correlation>
					</bpel:correlations>
				</bpel:receive> 
					
				<!-- Process Response and extract information -->
				<bpel:assign validate="no" name="ProcessResponse">
					<bpel:copy>
						<bpel:from variable="genericAsynchOperationServiceInvokerResponse" part="invokeResponse" >
							<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[//*[local-name()="Param" and namespace-uri()="http://siserver.org/schema"]/*[local-name()="key" and text()="scriptOutput"]/following-sibling::*[local-name()="value"]/text()]]></bpel:query>
						</bpel:from>
						<bpel:to variable="LocalStatusMessage"></bpel:to>
					</bpel:copy>					
				</bpel:assign>
								        
			</bpel:sequence>		
		</bpel:scope>	

	</bpel:sequence>		
				
	<!-- ================================================================= -->
	<!-- ===================== Update Output Message ===================== -->
	<!-- ================================================================= --> 				
		
	<bpel:sequence name="UpdateOutputMessage">		
	
		<!-- Set Application URL -->
		<bpel:assign name="SetApplicationURL">
			<bpel:copy>
				<bpel:from><![CDATA[concat("http://",$VM_Hostname,"/moodle")]]></bpel:from>
				<bpel:from variable="ApplicationURL"></bpel:from>
				<bpel:to part="payload" variable="output">
					<bpel:query queryLanguage="urn:oasis:names:tc:wsbpel:2.0:sublang:xpath1.0"><![CDATA[tns:selfserviceApplicationUrl]]></bpel:query>
				</bpel:to>
			</bpel:copy>
		</bpel:assign>
		
	</bpel:sequence>	
	
	<!-- Send asynchronous Response back to Requestor -->
    <bpel:invoke inputVariable="output" name="callbackClient" operation="onResult" partnerLink="client" portType="tns:MoodleBuildPlanCallback"/>
        
</bpel:sequence>

</bpel:process>