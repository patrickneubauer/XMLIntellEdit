package at.ac.tuwien.big.xmlintelledit.intelledit.oclgen;

import at.ac.tuwien.big.xmlintelledit.intelledit.oclgen.ErrorFeatureFindingVisitor;
import at.ac.tuwien.big.xmlintelledit.intelledit.oclgen.OCL2JavaVisitor;
import at.ac.tuwien.big.xmlintelledit.intelledit.oclgen.OclExtractor;
import java.io.File;
import java.util.Map;
import java.util.Set;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class OCL2ValidatorGenerator implements IGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    final String ecorePackageName = "at.ac.tuwien.big.forms";
    final String packageName = (ecorePackageName + ".form.validation.ocl");
    final Map<EClass, Map<String, String>> classOclExpressions = OclExtractor.getAllClassOCLExpressions(resource);
    final Function1<Map.Entry<EClass, Map<String, String>>, Boolean> _function = (Map.Entry<EClass, Map<String, String>> e) -> {
      int _size = e.getValue().size();
      return Boolean.valueOf((_size > 0));
    };
    Iterable<Map.Entry<EClass, Map<String, String>>> _filter = IterableExtensions.<Map.Entry<EClass, Map<String, String>>>filter(classOclExpressions.entrySet(), _function);
    for (final Map.Entry<EClass, Map<String, String>> classOclExpressionEntry : _filter) {
      {
        final String className = classOclExpressionEntry.getKey().getName();
        String _name = classOclExpressionEntry.getKey().getName();
        final String validatorClassName = (_name + "Validator");
        String _replaceAll = packageName.replaceAll("\\.", "\\/");
        String _plus = (_replaceAll + "/");
        String _plus_1 = (_plus + validatorClassName);
        String _plus_2 = (_plus_1 + ".xtend");
        final File name = new File(_plus_2);
        String _firstUpper = StringExtensions.toFirstUpper(classOclExpressionEntry.getKey().getEPackage().getName());
        final String packageClassName = (_firstUpper + "Package");
        final String classNameLiteral = className.toUpperCase();
        Set<Map.Entry<String, String>> _entrySet = classOclExpressionEntry.getValue().entrySet();
        for (final Map.Entry<String, String> oclExpressionEntry : _entrySet) {
          {
            String _key = oclExpressionEntry.getKey();
            final String evaluatorClassName = (_key + "BooleanExpressionEvaluator");
            String _replaceAll_1 = packageName.replaceAll("\\.", "\\/");
            String _plus_3 = (_replaceAll_1 + "/");
            String _plus_4 = (_plus_3 + evaluatorClassName);
            String _plus_5 = (_plus_4 + ".java");
            final File validatorFile = new File(_plus_5);
            String _string = validatorFile.toString();
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("package ");
            _builder.append(packageName);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("import java.util.Map;");
            _builder.newLine();
            _builder.append("import java.util.Set;");
            _builder.newLine();
            _builder.append("import org.eclipse.emf.ecore.EClass;");
            _builder.newLine();
            _builder.append("import org.eclipse.emf.ecore.EPackage;");
            _builder.newLine();
            _builder.append("import org.eclipse.emf.ecore.EObject;");
            _builder.newLine();
            _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
            _builder.newLine();
            _builder.append("import ");
            _builder.append(ecorePackageName);
            _builder.append(".");
            _builder.append(className);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("public class ");
            _builder.append(evaluatorClassName);
            _builder.append(" implements at.ac.tuwien.big.xmlintelledit.intelledit.oclgen.OCLBooleanExpressionEvaluator<");
            _builder.append(className);
            _builder.append("> {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public static final at.ac.tuwien.big.xmlintelledit.intelledit.oclgen.OCLBooleanExpressionEvaluator<");
            _builder.append(className, "\t");
            _builder.append("> INSTANCE = new ");
            _builder.append(evaluatorClassName, "\t");
            _builder.append("();");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public boolean isValid(");
            _builder.append(className, "\t");
            _builder.append(" self) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("final EPackage ePackage = self.eClass().getEPackage();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("final org.eclipse.ocl.EvaluationEnvironment evalEnv = org.eclipse.ocl.ecore.EcoreEnvironmentFactory.INSTANCE.createEvaluationEnvironment();");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("final Map<EClass, Set<EObject>> extents = new org.eclipse.ocl.LazyExtentMap<EClass, EObject>((EObject) self) {");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("// implements the inherited specification");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("protected boolean isInstance(EClass cls, EObject element) {");
            _builder.newLine();
            _builder.append("\t\t\t\t");
            _builder.append("return cls.isInstance(element);");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("};");
            _builder.newLine();
            String _java = OCL2JavaVisitor.toJava(classOclExpressionEntry.getKey(), oclExpressionEntry.getValue().replaceAll("\\r|\\n", "").trim());
            _builder.append(_java);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("@Override");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public EStructuralFeature findErrorFeature(");
            _builder.append(className, "\t");
            _builder.append(" self) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("return ");
            String _findFeature = ErrorFeatureFindingVisitor.findFeature(classOclExpressionEntry.getKey(), oclExpressionEntry.getValue().replaceAll("\\r|\\n", "").trim());
            _builder.append(_findFeature, "\t\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("}");
            _builder.newLine();
            fsa.generateFile(_string, _builder);
          }
        }
        String _string = name.toString();
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("package ");
        _builder.append(packageName);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("import org.eclipse.xtext.validation.Check;");
        _builder.newLine();
        _builder.append("import org.eclipse.xtext.validation.EValidatorRegistrar;");
        _builder.newLine();
        _builder.append("import java.util.ArrayList;");
        _builder.newLine();
        _builder.append("import org.eclipse.emf.ecore.EPackage;");
        _builder.newLine();
        _builder.append("import org.eclipse.emf.ecore.EAttribute;");
        _builder.newLine();
        _builder.append("import org.eclipse.emf.ecore.EStructuralFeature;");
        _builder.newLine();
        _builder.append("import ");
        _builder.append(ecorePackageName);
        _builder.append(".");
        _builder.append(className);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("import at.ac.tuwien.big.xmlintelledit.intelledit.oclgen.OCL2QuickfixSupport;");
        _builder.newLine();
        _builder.append("import at.ac.tuwien.big.xmlintelledit.intelledit.oclgen.OCLBasedValidationQuickfix;");
        _builder.newLine();
        _builder.newLine();
        _builder.append("public class ");
        _builder.append(validatorClassName);
        _builder.append(" extends org.eclipse.xtext.validation.AbstractDeclarativeValidator {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("override void register(EValidatorRegistrar registrar) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("// Do nothing to prevent registration and duplicate validation messages");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("override java.util.List<EPackage> getEPackages() {");
        _builder.newLine();
        _builder.append("\t    ");
        _builder.append("val result = new ArrayList<EPackage>();");
        _builder.newLine();
        _builder.append("\t    ");
        _builder.append("result.add(EPackage.Registry.INSTANCE.getEPackage(\"");
        String _nsURI = classOclExpressionEntry.getKey().getEPackage().getNsURI();
        _builder.append(_nsURI, "\t    ");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("return result;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("def static EPackage getPackage() {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("return EPackage.Registry.INSTANCE.getEPackage(\"");
        String _nsURI_1 = classOclExpressionEntry.getKey().getEPackage().getNsURI();
        _builder.append(_nsURI_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        {
          Set<Map.Entry<String, String>> _entrySet_1 = classOclExpressionEntry.getValue().entrySet();
          for(final Map.Entry<String, String> oclExpressionEntry_1 : _entrySet_1) {
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("public static final String ");
            String _upperCase = oclExpressionEntry_1.getKey().toUpperCase();
            _builder.append(_upperCase, "\t");
            _builder.append("_ISSUE_KEY = \"");
            String _key = oclExpressionEntry_1.getKey();
            _builder.append(_key, "\t");
            _builder.append("Error\";");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("private static final at.ac.tuwien.big.xmlintelledit.intelledit.oclgen.OCLBooleanExpressionEvaluator<");
            _builder.append(className, "\t");
            _builder.append("> evaluator");
            String _key_1 = oclExpressionEntry_1.getKey();
            _builder.append(_key_1, "\t");
            _builder.append(" = ");
            _builder.append(packageName, "\t");
            _builder.append(".");
            String _key_2 = oclExpressionEntry_1.getKey();
            _builder.append(_key_2, "\t");
            _builder.append("BooleanExpressionEvaluator.INSTANCE;");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("@Check");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("def void check");
            String _key_3 = oclExpressionEntry_1.getKey();
            _builder.append(_key_3, "\t");
            _builder.append("(");
            _builder.append(className, "\t");
            _builder.append(" o) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("if (!evaluator");
            String _key_4 = oclExpressionEntry_1.getKey();
            _builder.append(_key_4, "\t\t");
            _builder.append(".isValid(o)) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("val EStructuralFeature feature = evaluator");
            String _key_5 = oclExpressionEntry_1.getKey();
            _builder.append(_key_5, "\t\t\t");
            _builder.append(".findErrorFeature(o);");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("val userData = new ArrayList<String>();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("// We do this at runtime because later we might want to find out the error feature more dynamically");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("if (feature != null && feature instanceof EAttribute) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("val EAttribute attribute = feature as EAttribute;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("val Class<?> clazz = attribute.getEAttributeType().getInstanceClass();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("val list = new ArrayList<OCLBasedValidationQuickfix>();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("// Right now we only support boolean quickfixes");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("if (clazz == boolean || clazz == Boolean) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("val Boolean oldValue = o.eGet(feature, false) as Boolean;");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("if (oldValue == null) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("list.add(OCLBasedValidationQuickfix.fromValue(true, attribute.name));");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("list.add(OCLBasedValidationQuickfix.fromValue(false, attribute.name));");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("} else {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("if (Boolean.FALSE.equals(oldValue)) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("list.add(OCLBasedValidationQuickfix.fromValue(true, attribute.name));");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("} else if (Boolean.TRUE.equals(oldValue)) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("list.add(OCLBasedValidationQuickfix.fromValue(false, attribute.name));");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("if (!feature.isRequired()) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("list.add(OCLBasedValidationQuickfix.fromValue(null, attribute.name));");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("// Maybe we should remove validation since it could lead to filtering out quickfixes that could make sense locally");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("if (!list.empty) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("val original = o.eGet(feature, false);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("val deliver = o.eDeliver();");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("o.eSetDeliver(false);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("try {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("for (quickfix : list) {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("quickfix.apply(o, attribute);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("if (evaluator");
            String _key_6 = oclExpressionEntry_1.getKey();
            _builder.append(_key_6, "\t\t\t\t\t\t\t");
            _builder.append(".isValid(o)) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t\t");
            _builder.append("userData.add(OCL2QuickfixSupport.toString(quickfix));");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("} finally {");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("o.eSet(feature, original);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t\t");
            _builder.append("o.eSetDeliver(deliver);");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("\t\t");
            _builder.append("error(\"The OCL-Expression named \'");
            String _key_7 = oclExpressionEntry_1.getKey();
            _builder.append(_key_7, "\t\t\t");
            _builder.append("\' evaluated to false!\", feature, ");
            String _upperCase_1 = oclExpressionEntry_1.getKey().toUpperCase();
            _builder.append(_upperCase_1, "\t\t\t");
            _builder.append("_ISSUE_KEY, userData.toArray(newArrayOfSize(userData.size())));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("}");
        fsa.generateFile(_string, _builder);
      }
    }
  }
}
