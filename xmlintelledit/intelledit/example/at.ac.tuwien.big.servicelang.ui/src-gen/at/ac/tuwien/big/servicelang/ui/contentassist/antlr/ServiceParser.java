/*
 * generated by Xtext
 */
package at.ac.tuwien.big.servicelang.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import at.ac.tuwien.big.servicelang.services.ServiceGrammarAccess;

public class ServiceParser extends AbstractContentAssistParser {
	
	@Inject
	private ServiceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected at.ac.tuwien.big.servicelang.ui.contentassist.antlr.internal.InternalServiceParser createParser() {
		at.ac.tuwien.big.servicelang.ui.contentassist.antlr.internal.InternalServiceParser result = new at.ac.tuwien.big.servicelang.ui.contentassist.antlr.internal.InternalServiceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getServiceTypeAccess().getAlternatives(), "rule__ServiceType__Alternatives");
					put(grammarAccess.getContainerAccess().getGroup(), "rule__Container__Group__0");
					put(grammarAccess.getContainerAccess().getGroup_3(), "rule__Container__Group_3__0");
					put(grammarAccess.getContainerAccess().getGroup_3_3(), "rule__Container__Group_3_3__0");
					put(grammarAccess.getContainerAccess().getGroup_4(), "rule__Container__Group_4__0");
					put(grammarAccess.getContainerAccess().getGroup_4_3(), "rule__Container__Group_4_3__0");
					put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
					put(grammarAccess.getClusterAccess().getGroup(), "rule__Cluster__Group__0");
					put(grammarAccess.getClusterAccess().getGroup_8(), "rule__Cluster__Group_8__0");
					put(grammarAccess.getClusterAccess().getGroup_10(), "rule__Cluster__Group_10__0");
					put(grammarAccess.getClusterAccess().getGroup_11(), "rule__Cluster__Group_11__0");
					put(grammarAccess.getClusterAccess().getGroup_11_3(), "rule__Cluster__Group_11_3__0");
					put(grammarAccess.getEBigIntegerAccess().getGroup(), "rule__EBigInteger__Group__0");
					put(grammarAccess.getServerAccess().getGroup(), "rule__Server__Group__0");
					put(grammarAccess.getContainerAccess().getServiceAssignment_3_2(), "rule__Container__ServiceAssignment_3_2");
					put(grammarAccess.getContainerAccess().getServiceAssignment_3_3_1(), "rule__Container__ServiceAssignment_3_3_1");
					put(grammarAccess.getContainerAccess().getClusterAssignment_4_2(), "rule__Container__ClusterAssignment_4_2");
					put(grammarAccess.getContainerAccess().getClusterAssignment_4_3_1(), "rule__Container__ClusterAssignment_4_3_1");
					put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
					put(grammarAccess.getServiceAccess().getDesignSpeedAssignment_4(), "rule__Service__DesignSpeedAssignment_4");
					put(grammarAccess.getServiceAccess().getTypeAssignment_6(), "rule__Service__TypeAssignment_6");
					put(grammarAccess.getServiceAccess().getProvidedByAssignment_8(), "rule__Service__ProvidedByAssignment_8");
					put(grammarAccess.getClusterAccess().getNameAssignment_1(), "rule__Cluster__NameAssignment_1");
					put(grammarAccess.getClusterAccess().getDesignSpeedAssignment_4(), "rule__Cluster__DesignSpeedAssignment_4");
					put(grammarAccess.getClusterAccess().getServicesAssignment_7(), "rule__Cluster__ServicesAssignment_7");
					put(grammarAccess.getClusterAccess().getServicesAssignment_8_1(), "rule__Cluster__ServicesAssignment_8_1");
					put(grammarAccess.getClusterAccess().getBackupAssignment_10_1(), "rule__Cluster__BackupAssignment_10_1");
					put(grammarAccess.getClusterAccess().getServerAssignment_11_2(), "rule__Cluster__ServerAssignment_11_2");
					put(grammarAccess.getClusterAccess().getServerAssignment_11_3_1(), "rule__Cluster__ServerAssignment_11_3_1");
					put(grammarAccess.getServerAccess().getNameAssignment_1(), "rule__Server__NameAssignment_1");
					put(grammarAccess.getServerAccess().getSpeedAssignment_4(), "rule__Server__SpeedAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			at.ac.tuwien.big.servicelang.ui.contentassist.antlr.internal.InternalServiceParser typedParser = (at.ac.tuwien.big.servicelang.ui.contentassist.antlr.internal.InternalServiceParser) parser;
			typedParser.entryRuleContainer();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ServiceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ServiceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
