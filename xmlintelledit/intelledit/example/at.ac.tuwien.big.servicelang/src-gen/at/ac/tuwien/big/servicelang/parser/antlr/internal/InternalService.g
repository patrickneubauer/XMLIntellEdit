/*
 * generated by Xtext
 */
grammar InternalService;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package at.ac.tuwien.big.servicelang.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package at.ac.tuwien.big.servicelang.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import at.ac.tuwien.big.servicelang.services.ServiceGrammarAccess;

}

@parser::members {

 	private ServiceGrammarAccess grammarAccess;
 	
    public InternalServiceParser(TokenStream input, ServiceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Container";	
   	}
   	
   	@Override
   	protected ServiceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	 iv_ruleContainer=ruleContainer 
	 { $current=$iv_ruleContainer.current; } 
	 EOF 
;

// Rule Container
ruleContainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getContainerAccess().getContainerAction_0(),
            $current);
    }
)	otherlv_1='Container' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainerAccess().getContainerKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainerAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='service' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContainerAccess().getServiceKeyword_3_0());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getContainerAccess().getLeftCurlyBracketKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerAccess().getServiceServiceParserRuleCall_3_2_0()); 
	    }
		lv_service_5_0=ruleService		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerRule());
	        }
       		add(
       			$current, 
       			"service",
        		lv_service_5_0, 
        		"Service");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getContainerAccess().getCommaKeyword_3_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerAccess().getServiceServiceParserRuleCall_3_3_1_0()); 
	    }
		lv_service_7_0=ruleService		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerRule());
	        }
       		add(
       			$current, 
       			"service",
        		lv_service_7_0, 
        		"Service");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getContainerAccess().getRightCurlyBracketKeyword_3_4());
    }
)?(	otherlv_9='cluster' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getContainerAccess().getClusterKeyword_4_0());
    }
	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getContainerAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerAccess().getClusterClusterParserRuleCall_4_2_0()); 
	    }
		lv_cluster_11_0=ruleCluster		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerRule());
	        }
       		add(
       			$current, 
       			"cluster",
        		lv_cluster_11_0, 
        		"Cluster");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getContainerAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerAccess().getClusterClusterParserRuleCall_4_3_1_0()); 
	    }
		lv_cluster_13_0=ruleCluster		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerRule());
	        }
       		add(
       			$current, 
       			"cluster",
        		lv_cluster_13_0, 
        		"Cluster");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getContainerAccess().getRightCurlyBracketKeyword_4_4());
    }
)?	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getContainerAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleService
entryRuleService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	 iv_ruleService=ruleService 
	 { $current=$iv_ruleService.current; } 
	 EOF 
;

// Rule Service
ruleService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Service' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getServiceAccess().getServiceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='designSpeed' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getServiceAccess().getDesignSpeedKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getDesignSpeedEBigIntegerParserRuleCall_4_0()); 
	    }
		lv_designSpeed_4_0=ruleEBigInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		set(
       			$current, 
       			"designSpeed",
        		lv_designSpeed_4_0, 
        		"EBigInteger");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='type' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getServiceAccess().getTypeKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getTypeServiceTypeEnumRuleCall_6_0()); 
	    }
		lv_type_6_0=ruleServiceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_6_0, 
        		"ServiceType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='providedBy' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getServiceAccess().getProvidedByKeyword_7());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getProvidedByClusterCrossReference_8_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleCluster
entryRuleCluster returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClusterRule()); }
	 iv_ruleCluster=ruleCluster 
	 { $current=$iv_ruleCluster.current; } 
	 EOF 
;

// Rule Cluster
ruleCluster returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Cluster' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClusterAccess().getClusterKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClusterAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClusterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClusterAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='designSpeed' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClusterAccess().getDesignSpeedKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClusterAccess().getDesignSpeedEBigIntegerParserRuleCall_4_0()); 
	    }
		lv_designSpeed_4_0=ruleEBigInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClusterRule());
	        }
       		set(
       			$current, 
       			"designSpeed",
        		lv_designSpeed_4_0, 
        		"EBigInteger");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='services' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClusterAccess().getServicesKeyword_5());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClusterAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClusterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClusterAccess().getServicesServiceCrossReference_7_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClusterAccess().getCommaKeyword_8_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClusterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClusterAccess().getServicesServiceCrossReference_8_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getClusterAccess().getRightParenthesisKeyword_9());
    }
(	otherlv_11='backup' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getClusterAccess().getBackupKeyword_10_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClusterRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getClusterAccess().getBackupClusterCrossReference_10_1_0()); 
	    }
		ruleEString		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_13='server' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getClusterAccess().getServerKeyword_11_0());
    }
	otherlv_14='{' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getClusterAccess().getLeftCurlyBracketKeyword_11_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClusterAccess().getServerServerParserRuleCall_11_2_0()); 
	    }
		lv_server_15_0=ruleServer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClusterRule());
	        }
       		add(
       			$current, 
       			"server",
        		lv_server_15_0, 
        		"Server");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getClusterAccess().getCommaKeyword_11_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClusterAccess().getServerServerParserRuleCall_11_3_1_0()); 
	    }
		lv_server_17_0=ruleServer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClusterRule());
	        }
       		add(
       			$current, 
       			"server",
        		lv_server_17_0, 
        		"Server");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getClusterAccess().getRightCurlyBracketKeyword_11_4());
    }
)?	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getClusterAccess().getRightCurlyBracketKeyword_12());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEBigInteger
entryRuleEBigInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEBigIntegerRule()); } 
	 iv_ruleEBigInteger=ruleEBigInteger 
	 { $current=$iv_ruleEBigInteger.current.getText(); }  
	 EOF 
;

// Rule EBigInteger
ruleEBigInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBigIntegerAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEBigIntegerAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleServer
entryRuleServer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServerRule()); }
	 iv_ruleServer=ruleServer 
	 { $current=$iv_ruleServer.current; } 
	 EOF 
;

// Rule Server
ruleServer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Server' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getServerAccess().getServerKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServerAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServerRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getServerAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='speed' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getServerAccess().getSpeedKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServerAccess().getSpeedEBigIntegerParserRuleCall_4_0()); 
	    }
		lv_speed_4_0=ruleEBigInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServerRule());
	        }
       		set(
       			$current, 
       			"speed",
        		lv_speed_4_0, 
        		"EBigInteger");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getServerAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Rule ServiceType
ruleServiceType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='BESTEFFORT' 
	{
        $current = grammarAccess.getServiceTypeAccess().getBESTEFFORTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getServiceTypeAccess().getBESTEFFORTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='WEAKCONTRACT' 
	{
        $current = grammarAccess.getServiceTypeAccess().getWEAKCONTRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getServiceTypeAccess().getWEAKCONTRACTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='FAILSAFE' 
	{
        $current = grammarAccess.getServiceTypeAccess().getFAILSAFEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getServiceTypeAccess().getFAILSAFEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='IMPORTANT' 
	{
        $current = grammarAccess.getServiceTypeAccess().getIMPORTANTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getServiceTypeAccess().getIMPORTANTEnumLiteralDeclaration_3()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


