/*
 * generated by Xtext
 */
package at.ac.tuwien.big.servicelang.serializer;

import at.ac.tuwien.big.servicelang.services.ServiceGrammarAccess;
import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import serviceexample.Cluster;
import serviceexample.Container;
import serviceexample.Server;
import serviceexample.Service;
import serviceexample.ServiceexamplePackage;

@SuppressWarnings("all")
public abstract class AbstractServiceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ServiceGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ServiceexamplePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ServiceexamplePackage.CLUSTER:
				sequence_Cluster(context, (Cluster) semanticObject); 
				return; 
			case ServiceexamplePackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case ServiceexamplePackage.SERVER:
				sequence_Server(context, (Server) semanticObject); 
				return; 
			case ServiceexamplePackage.SERVICE:
				sequence_Service(context, (Service) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         designSpeed=EBigInteger 
	 *         services+=[Service|EString] 
	 *         services+=[Service|EString]* 
	 *         backup=[Cluster|EString]? 
	 *         (server+=Server server+=Server*)?
	 *     )
	 */
	protected void sequence_Cluster(EObject context, Cluster semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((service+=Service service+=Service*)? (cluster+=Cluster cluster+=Cluster*)?)
	 */
	protected void sequence_Container(EObject context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EString speed=EBigInteger)
	 */
	protected void sequence_Server(EObject context, Server semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ServiceexamplePackage.Literals.NAMED_THING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ServiceexamplePackage.Literals.NAMED_THING__NAME));
			if(transientValues.isValueTransient(semanticObject, ServiceexamplePackage.Literals.SERVER__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ServiceexamplePackage.Literals.SERVER__SPEED));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getServerAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getServerAccess().getSpeedEBigIntegerParserRuleCall_4_0(), semanticObject.getSpeed());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=EString designSpeed=EBigInteger type=ServiceType providedBy=[Cluster|EString])
	 */
	protected void sequence_Service(EObject context, Service semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ServiceexamplePackage.Literals.NAMED_THING__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ServiceexamplePackage.Literals.NAMED_THING__NAME));
			if(transientValues.isValueTransient(semanticObject, ServiceexamplePackage.Literals.SERVICE__PROVIDED_BY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ServiceexamplePackage.Literals.SERVICE__PROVIDED_BY));
			if(transientValues.isValueTransient(semanticObject, ServiceexamplePackage.Literals.SERVICE__DESIGN_SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ServiceexamplePackage.Literals.SERVICE__DESIGN_SPEED));
			if(transientValues.isValueTransient(semanticObject, ServiceexamplePackage.Literals.SERVICE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ServiceexamplePackage.Literals.SERVICE__TYPE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getServiceAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getServiceAccess().getDesignSpeedEBigIntegerParserRuleCall_4_0(), semanticObject.getDesignSpeed());
		feeder.accept(grammarAccess.getServiceAccess().getTypeServiceTypeEnumRuleCall_6_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getServiceAccess().getProvidedByClusterEStringParserRuleCall_8_0_1(), semanticObject.getProvidedBy());
		feeder.finish();
	}
}
