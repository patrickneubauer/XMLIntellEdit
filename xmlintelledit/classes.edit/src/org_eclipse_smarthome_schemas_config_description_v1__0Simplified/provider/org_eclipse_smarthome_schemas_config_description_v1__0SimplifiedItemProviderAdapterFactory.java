/**
 */
package org_eclipse_smarthome_schemas_config_description_v1__0Simplified.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org_eclipse_smarthome_schemas_config_description_v1__0Simplified.util.org_eclipse_smarthome_schemas_config_description_v1__0SimplifiedAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class org_eclipse_smarthome_schemas_config_description_v1__0SimplifiedItemProviderAdapterFactory extends org_eclipse_smarthome_schemas_config_description_v1__0SimplifiedAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public org_eclipse_smarthome_schemas_config_description_v1__0SimplifiedItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.ConfigDescription} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigDescriptionItemProvider configDescriptionItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.ConfigDescription}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigDescriptionAdapter() {
		if (configDescriptionItemProvider == null) {
			configDescriptionItemProvider = new ConfigDescriptionItemProvider(this);
		}

		return configDescriptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.ConfigDescriptionRef} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigDescriptionRefItemProvider configDescriptionRefItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.ConfigDescriptionRef}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigDescriptionRefAdapter() {
		if (configDescriptionRefItemProvider == null) {
			configDescriptionRefItemProvider = new ConfigDescriptionRefItemProvider(this);
		}

		return configDescriptionRefItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.ConfigDescriptions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigDescriptionsItemProvider configDescriptionsItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.ConfigDescriptions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigDescriptionsAdapter() {
		if (configDescriptionsItemProvider == null) {
			configDescriptionsItemProvider = new ConfigDescriptionsItemProvider(this);
		}

		return configDescriptionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Criteria} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CriteriaItemProvider criteriaItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Criteria}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCriteriaAdapter() {
		if (criteriaItemProvider == null) {
			criteriaItemProvider = new CriteriaItemProvider(this);
		}

		return criteriaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Filter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FilterItemProvider filterItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Filter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFilterAdapter() {
		if (filterItemProvider == null) {
			filterItemProvider = new FilterItemProvider(this);
		}

		return filterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Options} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionsItemProvider optionsItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Options}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionsAdapter() {
		if (optionsItemProvider == null) {
			optionsItemProvider = new OptionsItemProvider(this);
		}

		return optionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Option} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionItemProvider optionItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Option}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionAdapter() {
		if (optionItemProvider == null) {
			optionItemProvider = new OptionItemProvider(this);
		}

		return optionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.ParameterGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterGroupItemProvider parameterGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org_eclipse_smarthome_schemas_config_description_v1__0Simplified.ParameterGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterGroupAdapter() {
		if (parameterGroupItemProvider == null) {
			parameterGroupItemProvider = new ParameterGroupItemProvider(this);
		}

		return parameterGroupItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (configDescriptionItemProvider != null) configDescriptionItemProvider.dispose();
		if (configDescriptionRefItemProvider != null) configDescriptionRefItemProvider.dispose();
		if (configDescriptionsItemProvider != null) configDescriptionsItemProvider.dispose();
		if (criteriaItemProvider != null) criteriaItemProvider.dispose();
		if (filterItemProvider != null) filterItemProvider.dispose();
		if (optionsItemProvider != null) optionsItemProvider.dispose();
		if (optionItemProvider != null) optionItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (parameterGroupItemProvider != null) parameterGroupItemProvider.dispose();
	}

}
